{"ast":null,"code":"import axios from 'axios';\nimport { getToken } from '../firebase/auth';\nconst API_BASE = process.env.REACT_APP_API_BASE || 'http://localhost:3001';\nexport const getWeatherByCity = async city => {\n  try {\n    const token = getToken();\n    const resp = await axios.get(`${API_BASE}/weather`, {\n      params: {\n        q: city\n      },\n      headers: {\n        Authorization: token ? `Bearer ${token}` : undefined\n      },\n      timeout: 8000\n    });\n    // Adaptamos al shape que ya usan tus componentes (name, main.temp, weather[0].description)\n    return {\n      success: true,\n      data: {\n        name: resp.data.name,\n        main: {\n          temp: resp.data.temp\n        },\n        weather: [{\n          description: resp.data.desc\n        }]\n      }\n    };\n  } catch (error) {\n    if (error.response) {\n      var _error$response$data;\n      return {\n        success: false,\n        error: ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Error al obtener datos del clima'\n      };\n    } else if (error.request) {\n      return {\n        success: false,\n        error: 'Sin conexión a internet. Verifica tu conexión.'\n      };\n    } else {\n      return {\n        success: false,\n        error: 'Ocurrió un error inesperado.'\n      };\n    }\n  }\n};\nexport const getWeatherByCoords = async (lat, lon) => {\n  // (opcional) podrías crear en backend /weather/coords que reciba lat/lon\n  return {\n    success: false,\n    error: 'No implementado en backend. Usa búsqueda por ciudad.'\n  };\n};","map":{"version":3,"names":["axios","getToken","API_BASE","process","env","REACT_APP_API_BASE","getWeatherByCity","city","token","resp","get","params","q","headers","Authorization","undefined","timeout","success","data","name","main","temp","weather","description","desc","error","response","_error$response$data","request","getWeatherByCoords","lat","lon"],"sources":["C:/Users/DELL/Desktop/login/login/src/services/weatherService.js"],"sourcesContent":["import axios from 'axios';\r\nimport { getToken } from '../firebase/auth';\r\n\r\nconst API_BASE = process.env.REACT_APP_API_BASE || 'http://localhost:3001';\r\n\r\nexport const getWeatherByCity = async (city) => {\r\n  try {\r\n    const token = getToken();\r\n    const resp = await axios.get(`${API_BASE}/weather`, {\r\n      params: { q: city },\r\n      headers: { Authorization: token ? `Bearer ${token}` : undefined },\r\n      timeout: 8000\r\n    });\r\n    // Adaptamos al shape que ya usan tus componentes (name, main.temp, weather[0].description)\r\n    return { success: true, data: { \r\n      name: resp.data.name, \r\n      main: { temp: resp.data.temp }, \r\n      weather: [{ description: resp.data.desc }] \r\n    }};\r\n  } catch (error) {\r\n    if (error.response) {\r\n      return { success: false, error: error.response.data?.error || 'Error al obtener datos del clima' };\r\n    } else if (error.request) {\r\n      return { success: false, error: 'Sin conexión a internet. Verifica tu conexión.' };\r\n    } else {\r\n      return { success: false, error: 'Ocurrió un error inesperado.' };\r\n    }\r\n  }\r\n};\r\n\r\nexport const getWeatherByCoords = async (lat, lon) => {\r\n  // (opcional) podrías crear en backend /weather/coords que reciba lat/lon\r\n  return { success: false, error: 'No implementado en backend. Usa búsqueda por ciudad.' };\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAE3C,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,kBAAkB,IAAI,uBAAuB;AAE1E,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,IAAI,IAAK;EAC9C,IAAI;IACF,MAAMC,KAAK,GAAGP,QAAQ,CAAC,CAAC;IACxB,MAAMQ,IAAI,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAC,GAAGR,QAAQ,UAAU,EAAE;MAClDS,MAAM,EAAE;QAAEC,CAAC,EAAEL;MAAK,CAAC;MACnBM,OAAO,EAAE;QAAEC,aAAa,EAAEN,KAAK,GAAG,UAAUA,KAAK,EAAE,GAAGO;MAAU,CAAC;MACjEC,OAAO,EAAE;IACX,CAAC,CAAC;IACF;IACA,OAAO;MAAEC,OAAO,EAAE,IAAI;MAAEC,IAAI,EAAE;QAC5BC,IAAI,EAAEV,IAAI,CAACS,IAAI,CAACC,IAAI;QACpBC,IAAI,EAAE;UAAEC,IAAI,EAAEZ,IAAI,CAACS,IAAI,CAACG;QAAK,CAAC;QAC9BC,OAAO,EAAE,CAAC;UAAEC,WAAW,EAAEd,IAAI,CAACS,IAAI,CAACM;QAAK,CAAC;MAC3C;IAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,IAAIA,KAAK,CAACC,QAAQ,EAAE;MAAA,IAAAC,oBAAA;MAClB,OAAO;QAAEV,OAAO,EAAE,KAAK;QAAEQ,KAAK,EAAE,EAAAE,oBAAA,GAAAF,KAAK,CAACC,QAAQ,CAACR,IAAI,cAAAS,oBAAA,uBAAnBA,oBAAA,CAAqBF,KAAK,KAAI;MAAmC,CAAC;IACpG,CAAC,MAAM,IAAIA,KAAK,CAACG,OAAO,EAAE;MACxB,OAAO;QAAEX,OAAO,EAAE,KAAK;QAAEQ,KAAK,EAAE;MAAiD,CAAC;IACpF,CAAC,MAAM;MACL,OAAO;QAAER,OAAO,EAAE,KAAK;QAAEQ,KAAK,EAAE;MAA+B,CAAC;IAClE;EACF;AACF,CAAC;AAED,OAAO,MAAMI,kBAAkB,GAAG,MAAAA,CAAOC,GAAG,EAAEC,GAAG,KAAK;EACpD;EACA,OAAO;IAAEd,OAAO,EAAE,KAAK;IAAEQ,KAAK,EAAE;EAAuD,CAAC;AAC1F,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}