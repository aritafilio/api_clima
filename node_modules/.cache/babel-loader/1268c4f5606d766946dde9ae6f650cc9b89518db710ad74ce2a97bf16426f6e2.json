{"ast":null,"code":"import axios from 'axios';\nconst API_KEY = '7b3b9c63037ddd97be0175dc1c71625e';\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\n\n// Función para obtener el clima por ciudad\nexport const getWeatherByCity = async city => {\n  try {\n    const response = await axios.get(`${BASE_URL}/weather`, {\n      params: {\n        q: city,\n        appid: API_KEY,\n        units: 'metric',\n        // Para obtener temperaturas en Celsius\n        lang: 'es' // Para obtener descripciones en español\n      }\n    });\n    return {\n      success: true,\n      data: response.data\n    };\n  } catch (error) {\n    if (error.response) {\n      // Error de respuesta del servidor\n      return {\n        success: false,\n        error: error.response.data.message || 'Error al obtener datos del clima'\n      };\n    } else if (error.request) {\n      // Error de red\n      return {\n        success: false,\n        error: 'Sin conexión a internet. Verifica tu conexión.'\n      };\n    } else {\n      // Otros errores\n      return {\n        success: false,\n        error: 'Error inesperado al obtener datos del clima'\n      };\n    }\n  }\n};\n\n// Función para obtener el clima por coordenadas (latitud y longitud)\nexport const getWeatherByCoords = async (lat, lon) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/weather`, {\n      params: {\n        lat: lat,\n        lon: lon,\n        appid: API_KEY,\n        units: 'metric',\n        lang: 'es'\n      }\n    });\n    return {\n      success: true,\n      data: response.data\n    };\n  } catch (error) {\n    if (error.response) {\n      return {\n        success: false,\n        error: error.response.data.message || 'Error al obtener datos del clima'\n      };\n    } else if (error.request) {\n      return {\n        success: false,\n        error: 'Sin conexión a internet. Verifica tu conexión.'\n      };\n    } else {\n      return {\n        success: false,\n        error: 'Error inesperado al obtener datos del clima'\n      };\n    }\n  }\n};\n\n// Función para obtener el pronóstico de 5 días\nexport const getForecast = async city => {\n  try {\n    const response = await axios.get(`${BASE_URL}/forecast`, {\n      params: {\n        q: city,\n        appid: API_KEY,\n        units: 'metric',\n        lang: 'es'\n      }\n    });\n    return {\n      success: true,\n      data: response.data\n    };\n  } catch (error) {\n    if (error.response) {\n      return {\n        success: false,\n        error: error.response.data.message || 'Error al obtener pronóstico del clima'\n      };\n    } else if (error.request) {\n      return {\n        success: false,\n        error: 'Sin conexión a internet. Verifica tu conexión.'\n      };\n    } else {\n      return {\n        success: false,\n        error: 'Error inesperado al obtener pronóstico del clima'\n      };\n    }\n  }\n};","map":{"version":3,"names":["axios","API_KEY","BASE_URL","getWeatherByCity","city","response","get","params","q","appid","units","lang","success","data","error","message","request","getWeatherByCoords","lat","lon","getForecast"],"sources":["C:/Users/mryex/OneDrive/Escritorio/login/src/services/weatherService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_KEY = '7b3b9c63037ddd97be0175dc1c71625e';\r\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\r\n\r\n// Función para obtener el clima por ciudad\r\nexport const getWeatherByCity = async (city) => {\r\n  try {\r\n    const response = await axios.get(`${BASE_URL}/weather`, {\r\n      params: {\r\n        q: city,\r\n        appid: API_KEY,\r\n        units: 'metric', // Para obtener temperaturas en Celsius\r\n        lang: 'es' // Para obtener descripciones en español\r\n      }\r\n    });\r\n    return { success: true, data: response.data };\r\n  } catch (error) {\r\n    if (error.response) {\r\n      // Error de respuesta del servidor\r\n      return { \r\n        success: false, \r\n        error: error.response.data.message || 'Error al obtener datos del clima' \r\n      };\r\n    } else if (error.request) {\r\n      // Error de red\r\n      return { \r\n        success: false, \r\n        error: 'Sin conexión a internet. Verifica tu conexión.' \r\n      };\r\n    } else {\r\n      // Otros errores\r\n      return { \r\n        success: false, \r\n        error: 'Error inesperado al obtener datos del clima' \r\n      };\r\n    }\r\n  }\r\n};\r\n\r\n// Función para obtener el clima por coordenadas (latitud y longitud)\r\nexport const getWeatherByCoords = async (lat, lon) => {\r\n  try {\r\n    const response = await axios.get(`${BASE_URL}/weather`, {\r\n      params: {\r\n        lat: lat,\r\n        lon: lon,\r\n        appid: API_KEY,\r\n        units: 'metric',\r\n        lang: 'es'\r\n      }\r\n    });\r\n    return { success: true, data: response.data };\r\n  } catch (error) {\r\n    if (error.response) {\r\n      return { \r\n        success: false, \r\n        error: error.response.data.message || 'Error al obtener datos del clima' \r\n      };\r\n    } else if (error.request) {\r\n      return { \r\n        success: false, \r\n        error: 'Sin conexión a internet. Verifica tu conexión.' \r\n      };\r\n    } else {\r\n      return { \r\n        success: false, \r\n        error: 'Error inesperado al obtener datos del clima' \r\n      };\r\n    }\r\n  }\r\n};\r\n\r\n// Función para obtener el pronóstico de 5 días\r\nexport const getForecast = async (city) => {\r\n  try {\r\n    const response = await axios.get(`${BASE_URL}/forecast`, {\r\n      params: {\r\n        q: city,\r\n        appid: API_KEY,\r\n        units: 'metric',\r\n        lang: 'es'\r\n      }\r\n    });\r\n    return { success: true, data: response.data };\r\n  } catch (error) {\r\n    if (error.response) {\r\n      return { \r\n        success: false, \r\n        error: error.response.data.message || 'Error al obtener pronóstico del clima' \r\n      };\r\n    } else if (error.request) {\r\n      return { \r\n        success: false, \r\n        error: 'Sin conexión a internet. Verifica tu conexión.' \r\n      };\r\n    } else {\r\n      return { \r\n        success: false, \r\n        error: 'Error inesperado al obtener pronóstico del clima' \r\n      };\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}